# import google.generativeai as genai

# # Configure Generative AI
# genai.configure(api_key="AIzaSyBZ4VaW3Rw5wPYqU8nttVeziqHFogYSK_E")

# # Choose a Gemini model
# model = genai.GenerativeModel(model_name="gemini-1.5-pro")

# def chatbot_response(user_input):
#     """
#     Generate a chatbot response using Gemini AI model.
    
#     Args:
#         user_input (str): Input query from the user.

#     Returns:
#         str: AI-generated response.
#     """
#     # Tạo prompt cho Gemini với các chức năng mới
#     prompt = f"""
#     You are a helpful assistant. Answer the user's question below briefly. 
#     Additionally, suggest available services they can use for their query and guide them on how to use these services.

#     Available services:
#     1. QA from document: Prompt the user to upload a document, and you will extract and answer questions from it.
#     2. Generate Image: Ask the user to describe what they want to draw. Use the keyword "draw" to initiate the image generation process.
#     3. Describe an image: Prompt the user to upload an image, and you will analyze and describe the content of the image.

#     User: {user_input}
#     Bot:
#     """

#     # Call Gemini API
#     response = model.generate_content(prompt)
#     final_response = response.text.strip()

#     return final_response


import google.generativeai as genai
from llama_index.core.agent import ReActAgent
from llama_index.core.tools import FunctionTool
from llama_index.llms.gemini import Gemini
from generateimage import generate_image
import streamlit as st
import requests
# Configure Generative AI
#genai.configure(api_key="AIzaSyBZ4VaW3Rw5wPYqU8nttVeziqHFogYSK_E")

# Choose a Gemini model
#model = genai.GenerativeModel(model_name="gemini-1.5-pro")

model = Gemini(api_key="AIzaSyBZ4VaW3Rw5wPYqU8nttVeziqHFogYSK_E")
weather_api_key = "cb528d51b5824263b75190411242412"
def show_image(image_url):
    """
    In the final thought of the chatbot, show the image generated by the chatbot.
    """

    st.image(image_url, caption=f"Generated Image: ", use_container_width=True)

    return
def get_weather(location):
    """
    Fetches the current weather for a specified location using WeatherAPI.
    """
    api_url = f"http://api.weatherapi.com/v1/current.json?key={weather_api_key}&q={location}&aqi=no"
    
    try:
        response = requests.get(api_url)
        response.raise_for_status()  # Raise an exception for HTTP errors
        data = response.json()
        
        # Extract relevant weather information
        city = data['location']['name']
        country = data['location']['country']
        condition = data['current']['condition']['text']
        temp_c = data['current']['temp_c']
        feels_like_c = data['current']['feelslike_c']
        
        return (f"The current weather in {city}, {country} is {condition} "
                f"with a temperature of {temp_c}°C (feels like {feels_like_c}°C).")
    except requests.exceptions.RequestException as e:
        return f"Unable to fetch weather for {location}: {e}"
    except KeyError as e:
        return f"Unexpected response format: {e}"

generate_image_tool = FunctionTool.from_defaults(fn = generate_image)
show_image_tool = FunctionTool.from_defaults(fn = show_image)
get_weather_tool = FunctionTool.from_defaults(fn = get_weather)

agent = ReActAgent.from_tools([generate_image_tool, show_image_tool, get_weather_tool], llm=model, verbose=True)
def chatbot_response(user_input):
    """
    Generate a chatbot response using Gemini AI model. 
    Chatbot only answers based on the last thought. 
    Args:
        user_input (str): Input query from the user.

    Returns:
        str: AI-generated response.
    """
    # Tạo prompt cho Gemini với các chức năng mới
    prompt = f"""
    You are a helpful assistant. Answer the user's question below briefly. 
    Additionally, suggest available services they can use for their query and guide them on how to use these services.
    Chatbot only answers based on the last thought.
    Available services:
    1. QA from document: Prompt the user to upload a document, and you will extract and answer questions from it.
    2. Generate Image: Ask the user to describe what they want to draw or generate. 
    3. Describe an image: Prompt the user to upload an image, and you will analyze and describe the content of the image.

    User: {user_input}
    Bot:
    """
    # Call Gemini API
    response = agent.chat(prompt)
    print(response)
    # final_response = response
    return response